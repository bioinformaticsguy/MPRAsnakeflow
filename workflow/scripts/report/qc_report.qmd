---
title: "QC Measures"
page-layout: full
format:
  html:
    code-fold: true
    code-tools: true
    embed-resources: true
    anchor-sections: true
    smooth-scroll: true
    toc: true
jupyter: python3
---

```{python}
#| echo: false
# Imports
from IPython.display import display, Image
from pathlib import Path
import importlib
import pandas as pd 
import os
import sys
 
## Testing Imports
import matplotlib.pyplot as plt
import numpy as np

## Constants
image_path = Path(os.getcwd()).parent
ROOT_PATH = Path(os.getcwd()).parent
```

```{python}
#| echo: false
## Function Imports
cwd = Path.cwd()
while cwd.name != 'MPRAsnakeflow': cwd = cwd.parent
sys.path.insert(0, str(cwd))
from workflow.scripts.report.report_functions import get_unique_files, display_unique_images
```

```{python}
#| tags: [parameters]
#| echo: false
```

```{python}
#| echo: false
import yaml
import pprint

# Assuming `params` is your dictionary
def get_prams():
  with open('config.yml') as f:
      params = yaml.safe_load(f)
  return params

def get_config(params):
    return list(params["experiments"][project]["configs"].keys())[0]

def get_assignment(params):
    return list(params["experiments"][project]["assignments"].keys())[0]

def display_image(file_path, root_path=ROOT_PATH):
    full_path = str(root_path) + file_path
    display(Image(full_path))

# pprint.pprint(params)
```

```{python}
#| echo: false
## Generating the f strig elements.
params = get_prams()
config = get_config(params)
assignment = get_assignment(params)
```

# Per Barcode
## DNA
```{python}
#| echo: false
display_image(f"/statistic/barcode/counts/{condition}_{config}_{'DNA'}_perBarcode.png")
```

## RNA
```{python}
#| echo: false
display_image(f"/statistic/barcode/counts/{condition}_{config}_{'RNA'}_perBarcode.png")
```


# BC Corelation          
## DNA
```{python}
#| echo: false
display_unique_images('**/*barcode_DNA_pairwise*.png', image_path)
```

## RNA
```{python}
#| echo: false
display_unique_images('**/*barcode_RNA_pairwise*.png', image_path)
```


## Ratio
```{python}
#| echo: false
display_unique_images('**/*barcode_Ratio_pairwise*.png', image_path)
```




# Oligo Corelation
## DNA
```{python}
#| echo: false
display_unique_images('**/*DNA_pairwise.png', image_path, exclude='barcode')
```

### Minimum Threashold
```{python}
#| echo: false
display_unique_images('**/*DNA_pairwise_minThreshold.png', image_path, exclude='barcode')
```

## RNA
```{python}
#| echo: false
display_unique_images('**/*RNA_pairwise.png', image_path, exclude='barcode')
```

### Minimum Threashold
```{python}
#| echo: false
display_unique_images('**/*RNA_pairwise_minThreshold.png', image_path, exclude='barcode')
```

## Ratio
```{python}
#| echo: false
display_unique_images('**/*Ratio_pairwise.png', image_path, exclude='barcode')
```

### Minimum Threashold
```{python}
#| echo: false
display_unique_images('**/*Ratio_pairwise_minThreshold.png', image_path, exclude='barcode')
```



# Barcodes Per Insert
```{python}
#| echo: false
display_unique_images('**/*barcodesPerInsert.png', image_path)
```

# Oligo Correlation
```{python}
#| echo: false
tsv_files = list(ROOT_PATH.glob('**/*assigned_counts_merged*.tsv'))
if len(tsv_files) > 0:
  df = pd.read_csv(tsv_files[0], sep='\t')
df
```